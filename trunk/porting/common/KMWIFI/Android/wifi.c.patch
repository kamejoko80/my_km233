--- /home/vuarm/working/android/imx535/sources/i.MX53-QSB-Android-Gingerbread-Release4.3/src-orig/hardware/libhardware_legacy/wifi/wifi.c	2012-11-19 12:59:23.101106351 +0700
+++ /home/vuarm/working/android/imx535/sources/i.MX53-QSB-Android-Gingerbread-Release4.3/src/hardware/libhardware_legacy/wifi/wifi.c	2012-11-22 10:29:12.000000000 +0700
@@ -13,11 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Copyright (C) 2011 Freescale Semiconductor,Inc. */
 
+#include <stdio.h>
 #include <stdlib.h>
 #include <fcntl.h>
 #include <errno.h>
 #include <string.h>
+#include <sys/ioctl.h>
 
 #include "hardware_legacy/wifi.h"
 #include "libwpa_client/wpa_ctrl.h"
@@ -48,6 +51,27 @@
 // TODO: use new ANDROID_SOCKET mechanism, once support for multiple
 // sockets is in
 
+#if ATHEROS_WIFI_SDK
+
+#ifndef WIFI_DRIVER_MODULE_PATH
+#define WIFI_SDIO_IF_DRIVER_MODULE_PATH         "" /* use wlan_tool to load module */
+#define WIFI_DRIVER_MODULE_PATH                 ""
+#endif
+#ifndef WIFI_DRIVER_MODULE_NAME
+#define WIFI_SDIO_IF_DRIVER_MODULE_NAME         ""
+#define WIFI_DRIVER_MODULE_NAME                 "ar6000"
+#endif
+#ifndef WIFI_DRIVER_MODULE_ARG
+#define WIFI_DRIVER_MODULE_ARG          ""
+#endif
+#ifndef WIFI_FIRMWARE_LOADER
+#define WIFI_FIRMWARE_LOADER		        "wlan_tool"
+#endif
+#define WIFI_TEST_INTERFACE		        "sta"
+#define WIFI_DEF_IFNAME                         "wlan0"
+
+#else /* ATHENV */
+
 #ifndef WIFI_DRIVER_MODULE_PATH
 #define WIFI_DRIVER_MODULE_PATH         "/system/lib/modules/wlan.ko"
 #endif
@@ -60,11 +84,18 @@
 #ifndef WIFI_FIRMWARE_LOADER
 #define WIFI_FIRMWARE_LOADER		""
 #endif
-#define WIFI_TEST_INTERFACE		"sta"
+#define WIFI_TEST_INTERFACE		"wlan0"
+
+#endif
 
 #define WIFI_DRIVER_LOADER_DELAY	1000000
 
-static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
+#ifdef ATHEROS_WIFI_SDK
+static const char IFACE_DIR[]           = "/data/misc/wifi/wpa_supplicant";
+#else  /* #ifdef ATHEROS_WIFI_SDK */
+static const char IFACE_DIR[]           = "/data/misc/wifi/wpa_supplicant";
+#endif
+
 static const char DRIVER_MODULE_NAME[]  = WIFI_DRIVER_MODULE_NAME;
 static const char DRIVER_MODULE_TAG[]   = WIFI_DRIVER_MODULE_NAME " ";
 static const char DRIVER_MODULE_PATH[]  = WIFI_DRIVER_MODULE_PATH;
@@ -76,13 +107,13 @@
 static const char SUPP_CONFIG_TEMPLATE[]= "/system/etc/wifi/wpa_supplicant.conf";
 static const char SUPP_CONFIG_FILE[]    = "/data/misc/wifi/wpa_supplicant.conf";
 static const char MODULE_FILE[]         = "/proc/modules";
+static const char MAC_FILE[]            = "/data/misc/wifi/softmac";
 
 static int insmod(const char *filename, const char *args)
 {
     void *module;
     unsigned int size;
     int ret;
-
     module = load_file(filename, &size);
     if (!module)
         return -1;
@@ -106,7 +137,6 @@
         else
             break;
     }
-
     if (ret != 0)
         LOGD("Unable to unload driver module \"%s\": %s\n",
              modname, strerror(errno));
@@ -166,6 +196,40 @@
     return 0;
 }
 
+/* for Atheros HotSpot */
+int wifi_load_ap_driver()
+{
+    char driver_status[PROPERTY_VALUE_MAX];
+    int count = 100; /* wait at most 20 seconds for completion */
+
+    if (check_driver_loaded()) {
+        return 0;
+    }
+
+    if (strcmp(FIRMWARE_LOADER,"") == 0) {
+        usleep(WIFI_DRIVER_LOADER_DELAY);
+        property_set(DRIVER_PROP_NAME, "ok");
+    }
+    else {
+        property_set("ctl.start", WIFI_FIRMWARE_LOADER ":load_ap");
+    }
+    sched_yield();
+    while (count-- > 0) {
+        if (property_get(DRIVER_PROP_NAME, driver_status, NULL)) {
+            if (strcmp(driver_status, "ok") == 0)
+                return 0;
+            else if (strcmp(DRIVER_PROP_NAME, "failed") == 0) {
+                wifi_unload_driver();
+                return -1;
+            }
+        }
+        usleep(200000);
+    }
+    property_set(DRIVER_PROP_NAME, "timeout");
+    wifi_unload_driver();
+    return -1;
+}
+
 int wifi_load_driver()
 {
     char driver_status[PROPERTY_VALUE_MAX];
@@ -175,15 +239,20 @@
         return 0;
     }
 
+#ifndef ATHEROS_WIFI_SDK  /* NOT atheros SDK */
     if (insmod(DRIVER_MODULE_PATH, DRIVER_MODULE_ARG) < 0)
         return -1;
+#endif
 
     if (strcmp(FIRMWARE_LOADER,"") == 0) {
         usleep(WIFI_DRIVER_LOADER_DELAY);
         property_set(DRIVER_PROP_NAME, "ok");
-    }
-    else {
+    } else {
+#ifdef ATHEROS_WIFI_SDK
+        property_set("ctl.start", WIFI_FIRMWARE_LOADER ":load");
+#else
         property_set("ctl.start", FIRMWARE_LOADER);
+#endif
     }
     sched_yield();
     while (count-- > 0) {
@@ -205,8 +274,11 @@
 int wifi_unload_driver()
 {
     int count = 20; /* wait at most 10 seconds for completion */
-
+#ifdef ATHEROS_WIFI_SDK
+ if (property_set("ctl.start", WIFI_FIRMWARE_LOADER ":unload") == 0) {
+#else
     if (rmmod(DRIVER_MODULE_NAME) == 0) {
+#endif
 	while (count-- > 0) {
 	    if (!check_driver_loaded())
 		break;
@@ -370,14 +442,33 @@
         return -1;
     }
 
+#if ATHEROS_WIFI_SDK
+    property_get("wifi.interface", iface, WIFI_DEF_IFNAME);
+#else
     property_get("wifi.interface", iface, WIFI_TEST_INTERFACE);
+#endif
 
-    if (access(IFACE_DIR, F_OK) == 0) {
-        snprintf(ifname, sizeof(ifname), "%s/%s", IFACE_DIR, iface);
-    } else {
-        strlcpy(ifname, iface, sizeof(ifname));
+
+    snprintf(ifname, sizeof(ifname), "%s/%s", IFACE_DIR, iface);
+    LOGE("ctrl ifname = %s\n", ifname);
+
+    { /* check iface file is ready */
+        int cnt = 160; /* 8 seconds (160*50)*/
+        sched_yield();
+        while ( access(ifname, F_OK|W_OK)!=0 && cnt-- > 0) {
+            usleep(50000);
+        }
+        if (access(ifname, F_OK|W_OK)==0) {
+            LOGE("ifname %s is ready to read/write cnt=%d\n", ifname, cnt);
+        } else {
+            LOGE("ifname %s is not ready, cnt=%d\n", ifname, cnt);
+        }
     }
 
+#if ATHEROS_WIFI_SDK
+    LOGE("wifi_connect_to_supplicant: ifname = %s\n", ifname);
+#endif
+
     ctrl_conn = wpa_ctrl_open(ifname);
     if (ctrl_conn == NULL) {
         LOGE("Unable to open connection to supplicant on \"%s\": %s",
@@ -428,7 +519,7 @@
     int result;
     struct timeval tval;
     struct timeval *tptr;
-    
+
     if (monitor_conn == NULL) {
         LOGD("Connection closed\n");
         strncpy(buf, WPA_EVENT_TERMINATING " - connection closed", buflen-1);
@@ -456,7 +547,7 @@
     /*
      * Events strings are in the format
      *
-     *     <N>CTRL-EVENT-XXX 
+     *     <N>CTRL-EVENT-XXX
      *
      * where N is the message level in numerical form (0=VERBOSE, 1=DEBUG,
      * etc.) and XXX is the event name. The level information is not useful
